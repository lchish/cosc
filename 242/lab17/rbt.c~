#include <string.h>
#include <stdlib.h>
#include "rbt.h"
#include "mylib.h"

#define IS_BLACK(x) ((NULL == (x) || BLACK == (x)->colour))
#define IS_RED(x) ((NULL != (x) && RED == (x)->colour))

struct rbtnode
{
  char *key;
  colour_t colour;
  rbt left;
  rbt right;
};

rbt rbt_new()
{
  return NULL;
}

static rbt right_rotate(rbt r)
{
  rbt tmp = r;
  r = r->left;
  tmp->left = r->right;
  r->right = tmp;
  return r;
}
static rbt left_rotate(rbt r)
{
  rbt tmp = r;
  r = r->right;
  tmp->right = r->left;
  r->left = tmp;
  return r;
}
static rbt rbt_fix(rbt r)
{
  if(IS_RED(r->left) && IS_RED(r->left->left)){
    if(IS_RED(r->right)){
      /*colour root red and children a,b black*/
      r->colour = RED;
      r->left->colour = BLACK;
      r->right->colour = BLACK;
    }else if(IS_BLACK(r->right)){
      /*right rotate root , colour new root (a) black, and new child(old root) red*/
      r = right_rotate(r);
      r->colour = BLACK;
      r->right = RED;/*old root?*/
    }
  }else if(IS_RED(r->left) && IS_RED(r->left->right)){
    if(IS_RED(r->right)){
      /*colour root red and children a,b black*/
      r->colour = RED;
      r->left->colour = BLACK;
      r->right->colour = BLACK;
    }
    else if(IS_BLACK(r->right)){
      /*left rotate left child (a), right rotate root (r),colour new root (d) black and new child (R) red*/
      r->left = left_rotate(r->left);
      r = right_rotate(r);
      r->colour = BLACK;
      r->right = RED;/*old root?*/
    }
  }else if(IS_RED(r->right) && IS_RED(r->right->left)){
    if(IS_RED(r->left)){
      /* colour root (R) red and children (a,b) black*/
      r->colour = RED;
      r->left->colour = BLACK;
      r->right->colour = BLACK;
    }else if(IS_BLACK(r->left)){
      /*right rotate right child(b),left rotate root(r),colour new root (e) black and new child (r) red*/
      r->right = right_rotate(r->right);
      r = left_rotate(r);
      r->colour = BLACK;
      r->left->colour = RED;/*old root?*/
    }
  }else if(IS_RED(r->right) && IS_RED(r->right->right)){
    if(IS_RED(r->left)){
      /*colour root (R) red and children (A,B) black*/
      r->colour = RED;
      r->left->colour = BLACK;
      r->right->colour = BLACK;
    }
    else if(IS_BLACK(r->left)){
      /*left rotate root R, colour new root b black and new child R red*/
      r = left_rotate(r);
      r->colour = BLACK;
      r->left->colour = RED;/*old root?*/
    }
  }
  return r;
}
int rbt_search(rbt r, char *s)
{
  if(r == NULL){
    return 0;/*not found*/
  }else if(strcmp(r->key,s) == 0){
    return 1;/*found*/
  }else if(strcmp(r->key,s) < 0){/* r->key > s */
    return rbt_search(r->left,s);
  }else{/* r->key < s*/
    return rbt_search(r->right,s);
  }
}

rbt rbt_insert(rbt r,char *s)
{
  if(r == NULL){/*empty tree*/
    r = emalloc(sizeof *r);
    r->key = emalloc(strlen(s) * sizeof s[0] + 1);
    r->colour = RED;
    strcpy(r->key,s);
  }else if(strcmp(r->key,s)==0){/*do nothing*/
  }else if(strcmp(r->key,s) < 0){/*s > b-key */
    r->right = rbt_insert(r->right,s);
  }
  else if(strcmp(r->key,s) > 0){/*s < b-key*/
    r->left = rbt_insert(r->left,s);
  }
  r = rbt_fix(r);
  return r;
}
void rbt_inorder(rbt r, void f(char *s,colour_t c))
{
  if(r == NULL){
    return;
  }else{
    rbt_inorder(r->left,f);
    f(r->key,r->colour);
    rbt_inorder(r->right,f);
  }
}

void rbt_preorder(rbt r, void f(char *s,colour_t c))
{
  if(r == NULL){
    return;
  }else{
    f(r->key,r->colour);
    rbt_preorder(r->left,f);
    rbt_preorder(r->right,f);
  }
}
rbt rbt_remove(rbt r, char *s)
{
  rbt tmp;
  if(r == NULL){
    return r;
  }else if(strcmp(r->key,s)==0){/*we have found the item in the tree to remove*/
    if(r->left == NULL && r->right == NULL){
      free(r->key);
      free(r);
      return NULL;
    }else if(r->left != NULL && r->right == NULL){
      free(r->key);
      free(r);
      return r->left;
    }else if(r->left == NULL && r->right != NULL){
      free(r->key);
      free(r);
      return r->right;
    }else{/*node has two children*/
      tmp = r->right;
      while(tmp->left != NULL){/*find leftmost child of the right subtree*/
	tmp = tmp->left;
      }
      r->key = erealloc(r->key, (strlen(tmp->key) + 1) * sizeof tmp->key[0]); 
      strcpy(r->key,tmp->key);/*swap the key with the sucessor's key*/
      r->right = rbt_remove(r->right,tmp->key);/*remove tmp*/
      return r;
    }
  }else if(r->right != NULL && strcmp(s,r->key) > 0){/*s > b->key*/
    r->right = rbt_remove(r->right,s);
    return r;
  }else if(r->left != NULL && strcmp(s,r->key) < 0){/*s < b->key*/
    r->left = rbt_remove(r->left,s);
    return r;
  }
  else{
    return r;
  }
}
rbt rbt_delete(rbt r)
{
  if(r == NULL){
    return r;/*aka return null*/
  }else{
    rbt_delete(r->left);
    rbt_delete(r->right);

    free(r->key);
    free(r);
    return r;
  }
}
